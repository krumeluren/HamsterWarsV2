@using Presentation.HamsterWarsBlazorUI.Models

@inject HttpClient Http
@page "/battle"
<PageTitle>Battle</PageTitle>

<BattleStatistics hamsters="@previousHamsters"></BattleStatistics>

<div class="p-1 text-center bg-light">
    <h1 class="p-2 px-3 text-uppercase text-primary">Battle</h1>

    @if (hamsters == null)
    {
        <p><em>Loading new battle...</em></p>
    }
    else
    {
        if (hamsters.Length <= 0)
        {
            <p><em>No hamsters are available...</em></p>
        }
        else
        {
            <h4 class="mb-3 text-uppercase text-secondary">
                <span class="text-info">@hamsters[0].Name</span> <span>Versus</span> <span class="text-danger">@hamsters[1].Name</span>
            </h4>

            <div class="row">
                @foreach (var hamster in hamsters)
                {
                    <div style="cursor:pointer" class="card-container" @onclick="()=>UserVote(hamster)">
                        <HamsterCard hamster="@hamster"></HamsterCard>
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    private Hamster[]? previousHamsters;

    private Hamster[]? hamsters;

    protected override async Task OnInitializedAsync()
    {
        CreateBattle();
    }

    private void UserVote(Hamster votedfor)
    {
        if (hamsters == null)
        {
            Console.WriteLine("hamsters is null");
            return;
        }
        Hamster loser = hamsters.Where(h => h != votedfor).First();
        Vote(votedfor.Id, loser.Id);
    }

    /// <summary>
    /// Post a new battle to the server
    /// </summary>
    private void Vote(int winnerId, int loserId)
    {
        Http.PostAsJsonAsync("/matches", new { WinnerHamsterId = winnerId, LoserHamsterId = loserId });
        BattleResult(winnerId, loserId);
        CreateBattle();
    }
    /// <summary>
    /// Get the previous hamsters from the server
    /// </summary>
    private async void BattleResult(int winnerId, int loserId)
    {
        var hamster1 = await Http.GetFromJsonAsync<Hamster>($"/hamsters/{winnerId}");
        var hamster2 = await Http.GetFromJsonAsync<Hamster>($"/hamsters/{loserId}");
        previousHamsters = new Hamster[] { hamster1, hamster2 };
        StateHasChanged();
    }

    /// <summary>
    /// Create a new battle
    /// </summary>
    private async void CreateBattle()
    {
        Hamster? hamster11 = null;
        Hamster? hamster22 = null;

        //Retry 3 times
        for (int i = 0; i < 3; i++)
        {
            if (hamster11 == null || hamster22 == null || hamster11.Id == hamster22.Id)
            {
                hamster11 = await Http.GetFromJsonAsync<Hamster>("/hamsters/random");
                hamster22 = await Http.GetFromJsonAsync<Hamster>("/hamsters/random");
            }
            else
            {
                break;
            }
        }
        if (hamster11 == null || hamster22 == null || hamster11.Id == hamster22.Id)
        {
            throw new InvalidOperationException("Could not find two different hamsters to battle");
        }
        hamsters = new Hamster[] { hamster11, hamster22 };
        StateHasChanged();
    }

}
