@using Presentation.HamsterWarsBlazorUI.Models
@inject HttpClient Http
@page "/battle"
<PageTitle>Battle</PageTitle>

<BattleStatistics hamsters="@previousHamsters"></BattleStatistics>

<div class="p-1 text-center bg-light">
    <h1 class="p-2 px-3 text-uppercase text-primary">Battle</h1>

    @if (Error)
    {
        <ErrorMessage Message="Error starting battle."></ErrorMessage>
    }

    else if (hamsters != null)
    {
        if (hamsters.Length == 0)
        {
            <p><em>No hamsters are available...</em></p>
        }
        else
        {
            <h4 class="mb-3 text-uppercase text-secondary">
                <span class="text-info">@hamsters[0].Name</span> <span>Versus</span> <span class="text-danger">@hamsters[1].Name</span>
            </h4>

            <div class="row">
                @foreach (var hamster in hamsters)
                {
                    <div style="cursor:pointer" class="card-container" @onclick="()=>UserVote(hamster)">
                        <HamsterCard hamster="@hamster"></HamsterCard>
                    </div>
                }
            </div>
        }
    }

    else
    {
        <p><em>Loading new battle...</em></p>

    }
</div>

@code {
    private Hamster[]? previousHamsters;

    private Hamster[]? hamsters;

    private bool Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CreateBattle();
    }

    private void UserVote(Hamster votedfor)
    {
        if (hamsters == null)
        {
            Console.WriteLine("hamsters is null");
            return;
        }
        Hamster loser = hamsters.Where(h => h != votedfor).First();
        Vote(votedfor.Id, loser.Id);
    }

    /// <summary>
    /// Post a new battle to the server
    /// </summary>
    private void Vote(int winnerId, int loserId)
    {
        Http.PostAsJsonAsync("/matches", new { WinnerHamsterId = winnerId, LoserHamsterId = loserId });
        BattleResult();
        CreateBattle();
    }

    private async void BattleResult()
    {
        previousHamsters = new Hamster[] { hamsters[0], hamsters[1] };
        StateHasChanged();
    }

    /// <summary>
    /// Create a new battle
    /// </summary>
    private async void CreateBattle()
    {
        Hamster? hamster1 = null;
        Hamster? hamster2 = null;

        //Retry 3 times
        for (int i = 0; i < 3; i++)
        {
            if (hamster1 == null || hamster2 == null || hamster1.Id == hamster2.Id)
            {
                var responseMessage1 = await Http.GetAsync("/hamsters/random");
                var responseMessage2 = await Http.GetAsync("/hamsters/random");
                if (!responseMessage1.IsSuccessStatusCode || !responseMessage2.IsSuccessStatusCode)
                {
                    Error = true;
                    StateHasChanged();
                    return;
                }
                hamster1 = await responseMessage1.Content.ReadFromJsonAsync<Hamster>();
                hamster2 = await responseMessage2.Content.ReadFromJsonAsync<Hamster>();
            }
            else
            {
                break;
            }
        }
        if (hamster1 == null || hamster2 == null || hamster1.Id == hamster2.Id)
        {
            Error = true;
            StateHasChanged();
            return;
        }
        hamsters = new Hamster[] { hamster1, hamster2 };
        StateHasChanged();
    }

}
