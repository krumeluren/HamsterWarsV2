@inject HttpClient Http
@page "/statistics"
@using Presentation.HamsterWarsBlazorUI.Models

<div class="p-1 text-center bg-light">
    <h1 class="p-2 px-3 text-uppercase text-primary">Gallery</h1>
</div>


@if (Error)
{
    <ErrorMessage Message="Could not load statistics."></ErrorMessage>
}
else
{
    <div class="grid-wrap">
        <div class="p-1 text-center bg-light">
            <h3 class="p-2 px-3 text-uppercase text-info">All-time Winners</h3>
        </div>
        <div class="grid-container">
            @if (winners != null && winners.Count() > 0)
            {
                @foreach (var hamster in winners)
                {
                    <div class="card-container">
                        <HamsterCard Clickable DisplayGames onDeleted="OnInitializedAsync" hamster="@hamster"></HamsterCard>
                    </div>
                }
            }
            else
            {
                <span>Loading...</span>
            }
        </div>
    </div>
    <div class="grid-wrap">
        <div class="p-1 text-center bg-light">
            <h3 class="p-2 px-3 text-uppercase text-danger">All-time Losers</h3>
        </div>
        <div class="grid-container">
            @if (losers != null && losers.Count() > 0)
            {
                @foreach (var hamster in losers)
                {
                    <div class="card-container">
                        <HamsterCard Clickable DisplayGames onDeleted="OnInitializedAsync" hamster="@hamster"></HamsterCard>
                    </div>
                }
            }
            else
            {
                <span>Loading...</span>
            }
        </div>
    </div>
}

@code {

    private Hamster[]? winners;
    private Hamster[]? losers;

    private bool Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseMessageWinners = await Http.GetAsync("/winners");
        var responseMessageLosers = await Http.GetAsync("/losers");
        if (!responseMessageWinners.IsSuccessStatusCode || !responseMessageLosers.IsSuccessStatusCode)
        {
            Error = true;
            return;
        }
        winners = await responseMessageWinners.Content.ReadFromJsonAsync<Hamster[]>();
        losers = await responseMessageLosers.Content.ReadFromJsonAsync<Hamster[]>();
    }
}
